PRGM1:////
App.java//////////////////////////////////////////////////////////
package com.dsce;
import java.util.ResourceBundle;
public class App
{
public int userlogin(String inuser,String inpwd)
{
ResourceBundle rb= ResourceBundle.getBundle("config");
String username=rb.getString("username");
String password=rb.getString("password");
if(inuser.equals(username)&& inpwd.equals(password))
return 1;
else
return 0;
}
}
apptest.java///////////////////////////////////////////////////////////
package com.dsce;
import org.testng.Assert;
import org.testng.annotations.Test;
public class Apptest {
@Test
public void testlogin1()
{
App myapp=new App();

Assert.assertEquals(0,myapp.userlogin("abc","abc1234"));
}
@Test
public void testlogin2()
{
App myapp=new App();
Assert.assertEquals(1,myapp.userlogin("abc","abc@1234"));
}
}
config.prperties//////////////////////////////////////////////////////
username=abc
password=abc@1234


==============================================================================================================================================================================================================

PRGM_3A
dockerfile in vs////////////////////////////////////////////////////////
FROM tomcat:9.0.106
RUN rm -rf/usr/local/tomcat/webapps/*
COPY  /target/prgm3a-0.0.1-SNAPSHOT.war   /usr/local/tomcat/webapps/ROOT.war   (copy prgm3a.war and paste in COPY)
EXPOSE 8080

web.xml///////////////////////////////////////////////////////////////////////
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-war-plugin</artifactId>
    <configuration>
    <webXml>prgm3a/src/main/webapp/index.html</webXml>
    </configuration>
</plugin>

app1.py//////////////////////////////////////////////////////////////////////////

from flask import Flask
app = Flask(__name__)
@app.route('/')
def hello():
   return "hi from app1"
if __name__ =="__main__":
   app.run(host="0.0.0.0",port=5000)

dockerfile in app1/////////////////////////////////////////////////////////////////////
FROM python:3.12-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY app.py .
EXPOSE 5000
CMD ["python", "app.py"]

req.txt////////////////////////////////////////////////////////////////////////////////////
flask== 3.0.0

app2.py//////////////////////////////////////////////////////////////////////
import requests
response = requests.get("http://app1:5000/")
print("Response from App 1:", response.text)

app2/requirements.txt//////////////////////////////////////////////////////////////
requests==2.31.0

app2/Dockerfile//////////////////////////////////////////////////////////////
FROM python:3.12-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY app.py .
CMD ["python", "app.py"]

docker-compose.yml///////////////////////////////////////////////////////////
version: '3.9'
services:
app1:
build: ./app1
networks:
- app-network
ports:
- "5000:5000"
app2:
build: ./app2
networks:
- app-network
depends_on:
- app1
networks:
app-network:
driver: bridge

================================================================================================================================================================================================================

PRGM_4

app.py////////////////////////////////////////////////////////////////////////
from flask import Flask
app = Flask(__name__)
@app.route('/')
def hello():
    return "Hello from App 1!! Kubernetes, also known as K8s,is an open source system for
automating deployment, scaling, and management of containerized applications"
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)

deployment.yaml/////////////////////////////////////////////////////////////
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hw-deployment
spec:
  replicas: 2  
  selector:
    matchLabels:
      app: hello-world
  template:
    metadata:
      labels:
        app: hello-world
    spec:
      containers:
      - name: hw-container
        image: chethanaravi/app1-k8s:latest
        ports:
        - containerPort: 5000
req.txt//////////////////////////////////////////////////////////////////
flask == 3.0.0

service.yaml////////////////////////////////////////////////////////////////

apiVersion: v1
kind: Service
metadata:
  name: hello-world
spec:
  type: NodePort    
  selector:
    app: hello-world
  ports:
    - port: 5000        
      targetPort: 5000
dockerfile///////////////////////////////////////////////////////////////////////
FROM python:3.12-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY app.py .
EXPOSE 5000
CMD ["python", "app.py"]

